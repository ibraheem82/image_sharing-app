import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import morgan from "morgan";
import mongoose from "mongoose";
import { v2 as cloudinary } from 'cloudinary';
import bodyParser from "body-parser";

import imageRoute from "./src/Routes/ImageRoutes.js";


// `swagger-jsdoc`: This module is used to generate Swagger API documentation from JSDoc comments in your code. It allows you to define the API specification using comments, which swagger-jsdoc will then parse to create a JSON object that conforms to the OpenAPI Specification (formerly known as Swagger Specification).
import swaggerJsDoc from "swagger-jsdoc";

// `swagger-ui-express`: This module is an Express middleware that serves the Swagger UI, which provides a visual interface for your API documentation. It uses the Swagger definition generated by swagger-jsdoc to display a user-friendly interactive documentation page.
import swaggerUI from "swagger-ui-express";

const CSS_URL = "https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.17.14/swagger-ui.css";

const app = express();

dotenv.config();


// This middleware function parses incoming requests with a JSON payload and makes the parsed data available on req.body
// This sets a size limit on the incoming request body. In this case, the limit is set to 50 megabytes (MB), meaning that the server will reject requests with a body larger than 50MB. This is useful for controlling the size of incoming JSON payloads, especially when working with large data files like images or videos in base64 format.
app.use(bodyParser.json({ limit: "50mb" }));
app.use(morgan("dev"));
app.use(cors());

mongoose.connect(process.env.DB_URL)
    .then(() => {
        console.log("DB connection established");
    })
    .catch(err => {
        console.log(err);
    });

cloudinary.config({
    cloud_name: process.env.CLOUD_NAME,
    api_key: process.env.API_KEY,
    api_secret: process.env.API_SECRET
});

// Swagger options
const options = {
    definition: {
        openapi: "3.0.0",
        info: {
            title: "Image Uploader API",
            version: "1.0.0",
            description: "API documentation for Image Uploader"
        },
        servers: [
            {
                // url: `http://localhost:${process.env.PORT}`,
                url: 'https://server-topaz-seven-37.vercel.app',
                // url: "",
                description: "Image Uploader API"
            }
        ]
    },
    apis: ["./src/**/*.js"]
};


/* 
Swagger-JSDoc is a powerful tool that simplifies the process of generating interactive API documentation for Node.js applications. It leverages JSDoc comments to automatically generate OpenAPI (formerly known as Swagger) specifications, which can then be visualized using tools like Swagger UI.

*/


const specs = swaggerJsDoc(options);

// Mounts the Swagger UI middleware at the /api-docs endpoint. It serves the Swagger UI interface and renders the generated Swagger specification. The customCssUrl option allows for customizing the appearance of the Swagger UI.
app.use("/api-docs", swaggerUI.serve, swaggerUI.setup(specs, { customCssUrl: CSS_URL }));

app.get("/", (req, res) => {
    // res.json(`Working fine.`)
    res.send(`<a href="https://server-topaz-seven-37.vercel.app/api-docs">Swagger Documentation</a>`)
});

app.use("/api", imageRoute);

app.listen(process.env.PORT, () => {
    console.log(`Serving on port ${process.env.PORT}`);
});
